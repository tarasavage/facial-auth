services:
  fast-api:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      database:
        condition: service_healthy
    volumes:
      - ./src:/app/src
    networks:
      - main-network
  
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
  
  database:
    image: postgres:17.1
    restart: always
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
      start_interval: 300ms
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - main-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: always
    depends_on:
      fast-api:
        condition: service_started
    volumes:
      - ./frontend/src:/app/src
    ports:
      - "80:80"
    networks:
      - main-network

volumes:
  postgres_data:

networks:
  main-network:
    driver: bridge
